{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","searchTerm","setSearchTerm","API_URL","_useState3","result","_useState4","setArticles","_useState5","_useState6","counts","setCounts","_useState7","idlist","_useState8","setIds","fetchArticles","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","xml","idli","xmlart","obj","wrap","_context","prev","next","axios","get","concat","sent","console","log","data","esearchresult","count","toString","keys","map","key","Number","stop","apply","this","arguments","react_default","createElement","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAgHeA,EA3GH,WAAM,IAAAC,EACoBC,mBAAS,IAD7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACGI,EADHJ,EAAA,GAQZK,GAHYN,mBAAS,IACXA,mBAAS,IAET,kDAREO,EAUgBP,mBAAS,CAAEQ,OAAQ,KAVnCC,EAAAP,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAUCG,GAVDD,EAAA,GAAAA,EAAA,IAAAE,EAWYX,mBAAS,IAXrBY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAWTE,EAXSD,EAAA,GAWDE,EAXCF,EAAA,GAAAG,EAYMf,mBAAS,CAAEgB,OAAQ,KAZzBC,EAAAf,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAYJG,GAZID,EAAA,GAAAA,EAAA,IAgBVE,EAAa,eAAAC,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAoB,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAA,OAAAc,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEFC,IAAMC,IAAN,GAAAC,OAAa9B,EAAb,uDAAA8B,OAA0EhC,IAFxE,cAEdsB,EAFcK,EAAAM,KAIpBC,QAAQC,IAAIb,EAAIc,KAAKC,cAAcC,OAI7Bf,EAAOD,EAAIc,KAAKC,cAAczB,OACpCE,EAAOS,GACWD,EAAIc,KAAKG,WAGdjB,EAAIc,KAbGT,EAAAE,KAAA,GAeDC,IAAMC,IAAN,GAAAC,OAAa9B,EAAb,4CAAA8B,OAA+DT,IAf9D,QAehBC,EAfgBG,EAAAM,KAiBpBC,QAAQC,IAAIX,EAAOY,MAEnB1B,EAAUY,EAAIc,KAAKC,cAAcC,OAE7Bb,EAAOD,EAAOY,KAAKhC,OACnBA,EAASN,OAAO0C,KAAKf,GAAKgB,IAAI,SAASC,GAC3C,MAAO,CAACC,OAAOD,GAAMjB,EAAIiB,MAEzBR,QAAQC,IAAI/B,GACZE,EAAYF,EAAOgC,MAEnBF,QAAQC,IAAIb,GACZY,QAAQC,IAAIb,EAAIc,MA7BI,yBAAAT,EAAAiB,SAAAvB,MAAH,yBAAAL,EAAA6B,MAAAC,KAAAC,YAAA,GAyCnB,OACEC,EAAA7B,EAAA8B,cAAA,eACED,EAAA7B,EAAA8B,cAAA,OAAKC,UAAU,aACfF,EAAA7B,EAAA8B,cAAA,OAAKC,UAAU,OACbF,EAAA7B,EAAA8B,cAAA,OAAKC,UAAU,OACjBF,EAAA7B,EAAA8B,cAAA,QAAME,SAXc,SAACC,GACvBA,EAAEC,iBAEFtC,MASIiC,EAAA7B,EAAA8B,cAAA,SAAOC,UAAU,eACfF,EAAA7B,EAAA8B,cAAA,yCAAsCD,EAAA7B,EAAA8B,cAAA,WACtCD,EAAA7B,EAAA8B,cAAA,OAAKC,UAAU,4BACfF,EAAA7B,EAAA8B,cAAA,SACEK,KAAK,SACLC,YAAY,kBACZC,MAAOxD,EACPyD,SApEY,SAACL,GACrBnD,EAAcmD,EAAEM,OAAOF,UAqEjBR,EAAA7B,EAAA8B,cAAA,UAAQK,KAAK,UAAb,gBAONN,EAAA7B,EAAA8B,cAAA,OAAKC,UAAU,aACbF,EAAA7B,EAAA8B,cAAA,2BAAmBjD,GACnBgD,EAAA7B,EAAA8B,cAAA,kCAA0BxC,MC1EZkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAA7B,EAAA8B,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70b9b759.chunk.js","sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const onInputChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n  const counted = useState('');\n  const total = useState('');\n\n  let API_URL = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/';\n\n  const [articles, setArticles] = useState({ result: [] });\n  const [counts, setCounts] = useState('');\n  const [ids, setIds] = useState({ idlist: [] })\n \n  //const [articles, getArticles] = useState();\n\n  const fetchArticles = async () => {\n    // Ajax call using Axios\n    const xml = await axios.get(`${API_URL}esearch.fcgi?db=pubmed&retmax=20&retmode=json&term=${searchTerm}`);\n    \n    console.log(xml.data.esearchresult.count);\n    \n    \n    \n    const idli = xml.data.esearchresult.idlist;\n    setIds(idli);\n    const xmlstring = xml.data.toString();\n    // Articles returned\n    \n    const text = xml.data; \n   \n    var xmlart = await axios.get(`${API_URL}esummary.fcgi?db=pubmed&retmode=json&id=${idli}`);\n    \n    console.log(xmlart.data);\n   \n    setCounts(xml.data.esearchresult.count);\n\n    var obj = (xmlart.data.result);\n    var result = Object.keys(obj).map(function(key) {\n    return [Number(key), obj[key]];\n    });\n    console.log(result);\n    setArticles(result.data);\n    \n    console.log(xml)\n    console.log(xml.data)\n    \n  }\n  \n\n  // Submit handler\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n    // Call to fetch articles\n    fetchArticles();\n  }\n  \n  return (\n    <section>\n      <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n      <form onSubmit={onSubmitHandler}>\n        <label className=\"text-center\">\n          <span>Search for PuMed articles</span><br></br>\n          <div className='searchDiv center mx-auto'>\n          <input\n            type=\"search\"\n            placeholder=\"cancer genomics\"\n            value={searchTerm}\n            onChange={onInputChange}\n          />\n          <button type=\"submit\">Search</button>\n          </div>\n        </label>\n      </form>\n        </div>\n      </div>\n    </div>\n    <div className='container'>\n      <div>Search term: {searchTerm}</div>\n      <div>Number of articles: {counts}</div> \n    </div>\n      \n      \n      {/*<ul>\n      } {\n          articles.result.map((article, index) => {\n            return (\n              <li key={index}>\n                <div>\n                  \n                  <div>\n                    {/*<h3>{uid.pubdate}</h3>*/}\n                  {/*}  {/*<p>{article.volumeInfo.publishedDate}</p>*/}\n                {/*}  </div>\n                </div>\n                <hr />\n              </li>\n            );\n          })\n        } \n      </ul> */}\n    </section>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}